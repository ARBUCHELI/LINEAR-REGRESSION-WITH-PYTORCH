# -*- coding: utf-8 -*-
"""LINEAR REGRESSION WITH PYTORCH

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rgg46UQFxqhSl8UH7HOcxcSvKRpuCT8c

We begin by importing Numpy and PyTorch:
"""

import numpy as np
import torch

"""**Training data**

The training data can be represented using 2 matrices: inputs and targets, each with one row per observation, and one column per variable.
"""

# Input (temp, rainfall, humidity)
inputs = np.array([[73, 67, 43], 
                   [91, 88, 64], 
                   [87, 134, 58], 
                   [102, 43, 37], 
                   [69, 96, 70]], dtype='float32')

# Targets (apples, oranges)
targets = np.array([[56, 70], 
                    [81, 101], 
                    [119, 133], 
                    [22, 37], 
                    [103, 119]], dtype='float32')

"""We've separated the input and target variables, because we'll operate on them separately. Also, we've created numpy arrays, because this is typically how you would work with training data: read some CSV files as numpy arrays, do some processing, and then convert them to PyTorch tensors as follows:"""

# Convert inputs and targets to tensors
inputs = torch.from_numpy(inputs)
targets = torch.from_numpy(targets)
print(inputs)
print(targets)

"""**Linear regression model from scratch**

The weights and biases (w11, w12,... w23, b1 & b2) can also be represented as matrices, initialized as random values. The first row of w and the first element of b are used to predict the first target variable i.e. yield of apples, and similarly the second for oranges.
"""

# Weights and biases
w = torch.randn(2, 3, requires_grad=True)
b = torch.randn(2, requires_grad=True)
print(w)
print(b)

"""torch.randn creates a tensor with the given shape, with elements picked randomly from a normal distribution with mean 0 and standard deviation 1.

Our model is simply a function that performs a matrix multiplication of the inputs and the weights w (transposed) and adds the bias b (replicated for each observation).

![alt text](https://i.imgur.com/WGXLFvA.png)

We can define the model as follows:
"""

def model(x):
    return x @ w.t() + b

"""@ represents matrix multiplication in PyTorch, and the .t method returns the transpose of a tensor.

The matrix obtained by passing the input data into the model is a set of predictions for the target variables.
"""

# Generate predictions
preds = model(inputs)
print(preds)

"""Let's compare the predictions of our model with the actual targets."""

# Compare with targets
print(targets)

"""You can see that there's a huge difference between the predictions of our model, and the actual values of the target variables. Obviously, this is because we've initialized our model with random weights and biases, and we can't expect it to just work.

**Loss function**

Before we improve our model, we need a way to evaluate how well our model is performing. We can compare the model's predictions with the actual targets, using the following method:

Calculate the difference between the two matrices (preds and targets).
Square all elements of the difference matrix to remove negative values.
Calculate the average of the elements in the resulting matrix.
The result is a single number, known as the **mean squared error** (MSE).
"""

# MSE loss
def mse(t1, t2):
    diff = t1 - t2
    return torch.sum(diff * diff) / diff.numel()

"""torch.sum returns the sum of all the elements in a tensor, and the .numel method returns the number of elements in a tensor. Let's compute the mean squared error for the current predictions of our model."""

# Compute loss
loss = mse(preds, targets)
print(loss)

"""Here’s how we can interpret the result: On average, each element in the prediction differs from the actual target by about 145 (square root of the loss 20834). And that’s pretty bad, considering the numbers we are trying to predict are themselves in the range 50–200. Also, the result is called the loss, because it indicates how bad the model is at predicting the target variables. Lower the loss, better the model.

**Compute gradients**

With PyTorch, we can automatically compute the gradient or derivative of the loss w.r.t. to the weights and biases, because they have requires_grad set to True.
"""

# Compute gradients
loss.backward()

"""The gradients are stored in the .grad property of the respective tensors. Note that the derivative of the loss w.r.t. the weights matrix is itself a matrix, with the same dimensions."""

# Gradients for weights
print(w)
print(w.grad)

"""The loss is a quadratic function of our weights and biases, and our objective is to find the set of weights where the loss is the lowest. If we plot a graph of the loss w.r.t any individual weight or bias element, it will look like the figure shown below. A key insight from calculus is that the gradient indicates the rate of change of the loss, or the slope of the loss function w.r.t. the weights and biases.

If a gradient element is positive:

- increasing the element's value slightly will increase the loss.
- decreasing the element's value slightly will decrease the loss.

![alt text](https://i.imgur.com/hFYoVgU.png)

If a gradient element is negative:

- increasing the element's value slightly will decrease the loss.
- decreasing the element's value slightly will increase the loss.

![alt text](https://i.imgur.com/w3Wii7C.png)

The increase or decrease in loss by changing a weight element is proportional to the value of the gradient of the loss w.r.t. that element. This forms the basis for the optimization algorithm that we'll use to improve our model.

Before we proceed, we reset the gradients to zero by calling .zero_() method. We need to do this, because PyTorch accumulates, gradients i.e. the next time we call .backward on the loss, the new gradient values will get added to the existing gradient values, which may lead to unexpected results.
"""

w.grad.zero_()
b.grad.zero_()
print(w.grad)
print(b.grad)

"""**Adjust weights and biases using gradient descent**

We'll reduce the loss and improve our model using the gradient descent optimization algorithm, which has the following steps:

1. Generate predictions

2. Calculate the loss

3. Compute gradients w.r.t the weights and biases

4. Adjust the weights by subtracting a small quantity proportional to the gradient

5. Reset the gradients to zero

Let's implement the above step by step.
"""

# Generate predictions
preds = model(inputs)
print(preds)

"""Note that the predictions are same as before, since we haven't made any changes to our model. The same holds true for the loss and gradients."""

# Calculate the loss
loss = mse(preds, targets)
print(loss)

# Compute gradients
loss.backward()
print(w.grad)
print(b.grad)

"""Finally, we update the weights and biases using the gradients computed above."""

# Adjust weights & reset gradients
with torch.no_grad():
    w -= w.grad * 1e-5
    b -= b.grad * 1e-5
    w.grad.zero_()
    b.grad.zero_()

"""A few things to note above:

- We use torch.no_grad to indicate to PyTorch that we shouldn't track, calculate or modify gradients while updating the weights and biases. 

- We multiply the gradients with a really small number (10^-5 in this case), to ensure that we don't modify the weights by a really large amount, since we only want to take a small step in the downhill direction of the gradient. This number is called the learning rate of the algorithm. 

- After we have updated the weights, we reset the gradients back to zero, to avoid affecting any future computations.

Let's take a look at the new weights and biases.
"""

print(w)
print(b)

"""With the new weights and biases, the model should have lower loss."""

# Calculate loss
preds = model(inputs)
loss = mse(preds, targets)
print(loss)

"""We have already achieved a significant reduction in the loss, simply by adjusting the weights and biases slightly using gradient descent.

**Train for multiple epochs**

To reduce the loss further, we can repeat the process of adjusting the weights and biases using the gradients multiple times. Each iteration is called an epoch. Let's train the model for 100 epochs.
"""

# Train for 100 epochs
for i in range(100):
    preds = model(inputs)
    loss = mse(preds, targets)
    loss.backward()
    with torch.no_grad():
        w -= w.grad * 1e-5
        b -= b.grad * 1e-5
        w.grad.zero_()
        b.grad.zero_()

"""Once again, let's verify that the loss is now lower:"""

# Calculate loss
preds = model(inputs)
loss = mse(preds, targets)
print(loss)

"""As you can see, the loss is now much lower than what we started out with. Let's look at the model's predictions and compare them with the targets."""

# Predictions
preds

# Targets
targets

"""The prediction are now quite close to the target variables, and we can get even better results by training for a few more epochs."""

